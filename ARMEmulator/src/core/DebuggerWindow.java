/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package core;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.Set;
import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

/**
 *
 * @author Bart
 */
public class DebuggerWindow extends javax.swing.JFrame {

    private CyclicBarrier barrier;
	/**
     * Creates new form DebuggerWindow
     */
    public DebuggerWindow() {
    	this.barrier = new CyclicBarrier(2);
        initComponents();
        this.pack();
        this.setLocation(100, 100);
        setResizable(false);
        setTitle("ARM Debugger");
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);


        codeLabel.setText("Code");

        stackLabel.setText("Stack");

        heapLabel.setText("Heap");

        stepButton.setText("Step");
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        registersLabel.setText("Registers");

        codePane.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jScrollPane5.setViewportView(codePane);

        stackPane.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jScrollPane6.setViewportView(stackPane);

        heapPane.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jScrollPane7.setViewportView(heapPane);

        flagsPane.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        registersPane.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        jScrollPane8.setViewportView(registersPane);

        flagsLabel.setText("Flags");

        jScrollPane1.setViewportView(flagsPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stackLabel)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(heapLabel)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(stepButton, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(registersLabel)
                        .addGap(126, 126, 126)
                        .addComponent(flagsLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codeLabel)
                    .addComponent(stackLabel)
                    .addComponent(heapLabel)
                    .addComponent(registersLabel)
                    .addComponent(flagsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane8)
                    .addComponent(jScrollPane7)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stepButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                     

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try {
			barrier.await();
		} catch (InterruptedException | BrokenBarrierException e) {
			e.printStackTrace();
		}
    }                                          

   

    // Variables declaration - do not modify                     
    public final javax.swing.JLabel codeLabel = new javax.swing.JLabel();
    public final javax.swing.JEditorPane codePane = new javax.swing.JEditorPane("text/html", "");
    public final javax.swing.JLabel flagsLabel = new javax.swing.JLabel();
    public final javax.swing.JTextPane flagsPane = new javax.swing.JTextPane();
    public final javax.swing.JLabel heapLabel = new javax.swing.JLabel();
    public final javax.swing.JTextPane heapPane = new javax.swing.JTextPane();
    public final javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
    public final javax.swing.JScrollPane jScrollPane5 = new javax.swing.JScrollPane();
    public final javax.swing.JScrollPane jScrollPane6 = new javax.swing.JScrollPane();
    public final javax.swing.JScrollPane jScrollPane7 = new javax.swing.JScrollPane();
    public final javax.swing.JScrollPane jScrollPane8 = new javax.swing.JScrollPane();
    public final javax.swing.JLabel registersLabel = new javax.swing.JLabel();
    public final javax.swing.JTextPane registersPane = new javax.swing.JTextPane();
    public final javax.swing.JLabel stackLabel = new javax.swing.JLabel();
    public final javax.swing.JTextPane stackPane = new javax.swing.JTextPane();
    public final javax.swing.JButton stepButton = new javax.swing.JButton();
    // End of variables declaration                   
	public void updateContents(ArrayList<Command> commands, HashMap<String, String> registerMap, HashMap<String, Integer> labels, String[] stack, boolean[] flags) {
		StringBuffer buffer = new StringBuffer();

		int programCounter = Integer.parseInt(registerMap.get("pc"));
		int fp = Integer.parseInt(registerMap.get("fp"));
		int sp = Integer.parseInt(registerMap.get("sp"));
		
		
		for(int i = stack.length - 1; i >= 0; i--) {
			buffer.append(i*4);
			if(i == fp/4) {
				buffer.append(" fp");
			}
			if(i == sp/4) {
				buffer.append(" sp");
			}
			buffer.append("\t");
			if(stack[i] != null) {
				buffer.append(stack[i]);				
			}
			buffer.append("\n");
		}
		stackPane.setText(buffer.toString());
		
		buffer = new StringBuffer();
		for(int i = 0; i < stack.length; i++) {
			buffer.append(i*4);
			buffer.append("\t");
			if(stack[i] != null) {
				buffer.append(stack[i]);
			}
			buffer.append("\n");
		}
		heapPane.setText(buffer.toString());
		
		buffer = new StringBuffer();
		for(String register : new String[]{"pc", "fp", "sp", "lr", "r0", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r10", "r11"}) {
			buffer.append(register);
			buffer.append(":\t");
			buffer.append(registerMap.get(register));
			buffer.append("\n");
		}
		registersPane.setText(buffer.toString());
		
		Collection<Integer> existingLabels = labels.values();
		
		buffer = new StringBuffer();
		buffer.append("<font face=\"courier new\" size=\"3\">");
		for(int i = 0; i < commands.size(); i++) {
			if(existingLabels.contains(i)) {
				for(String label : labels.keySet()) {
					if(labels.get(label) == i) {
						buffer.append("<font color=\"green\">");
						buffer.append(label + ":<br>");
						buffer.append("</font>");
					}
				}
			}
			buffer.append(i);
			buffer.append(" ");
			if(i == programCounter) {
				buffer.append("<b><font color=\"red\">");
			}
			buffer.append(commands.get(i));
			if(i == programCounter) {
				buffer.append("</font></b>");
			}
			buffer.append("<br>");
		}
		buffer.append("</font>");
		codePane.setText(buffer.toString());
		
		String flagString = "";
		flagString += "le:\t" + flags[0] + "\n";
		flagString += "lt:\t" + flags[1] + "\n";
		flagString += "eq:\t" + flags[2] + "\n";
		flagString += "ne:\t" + flags[3] + "\n";
		flagString += "ge:\t" + flags[4] + "\n";
		flagString += "gt:\t" + flags[5] + "\n";
		flagsPane.setText(flagString);
		
		try {
			barrier.await();
		} catch (InterruptedException | BrokenBarrierException e) {
			e.printStackTrace();
		}
	}
}
